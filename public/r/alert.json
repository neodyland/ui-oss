{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert",
  "type": "registry:component",
  "title": "Alert",
  "description": "An alert component to display important messages.",
  "dependencies": [
    "tailwind-variants",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/alert.tsx",
      "content": "\"use client\";\n\nimport { type ComponentPropsWithoutRef, type ReactNode, forwardRef } from \"react\";\nimport { tv } from \"tailwind-variants\";\nimport { CircleCheck, TriangleAlert, CircleAlert, Info } from \"lucide-react\";\n\nconst ICONS = {\n\tsuccess: {\n\t\tsolid: CircleCheck,\n\t\toutline: CircleCheck,\n\t},\n\twarning: {\n\t\tsolid: TriangleAlert,\n\t\toutline: TriangleAlert,\n\t},\n\terror: {\n\t\tsolid: CircleAlert,\n\t\toutline: CircleAlert,\n\t},\n\tinfo: {\n\t\tsolid: Info,\n\t\toutline: Info,\n\t},\n};\n\nconst alertVariants = tv({\n\tslots: {\n\t\tbase: \"rounded-md border px-4 py-2 text-sm tracking-wide transition-colors\",\n\t\ticon: \"h-5 w-5 shrink-0\",\n\t\ttext: \"tracking-wide\",\n\t\ttitle: \"text-lg font-bold\",\n\t},\n\tvariants: {\n\t\ttype: {\n\t\t\tsuccess: {\n\t\t\t\tbase: \"border-success-200 bg-success-50\",\n\t\t\t\ticon: \"text-success-500\",\n\t\t\t\ttitle: \"text-success-800\",\n\t\t\t\ttext: \"text-success-800\",\n\t\t\t},\n\t\t\twarning: {\n\t\t\t\tbase: \"border-warn-200 bg-warn-50\",\n\t\t\t\ticon: \"text-warn-500\",\n\t\t\t\ttitle: \"text-warn-800\",\n\t\t\t\ttext: \"text-warn-800\",\n\t\t\t},\n\t\t\terror: {\n\t\t\t\tbase: \"border-error-200 bg-error-50\",\n\t\t\t\ticon: \"text-error-500\",\n\t\t\t\ttitle: \"text-error-800\",\n\t\t\t\ttext: \"text-error-800\",\n\t\t\t},\n\t\t\tinfo: {\n\t\t\t\tbase: \"border-info-200 bg-info-50\",\n\t\t\t\ticon: \"text-info-500\",\n\t\t\t\ttitle: \"text-info-800\",\n\t\t\t\ttext: \"text-info-800\",\n\t\t\t},\n\t\t},\n\t\ttitle: {\n\t\t\ttrue: {\n\t\t\t\ticon: \"my-0.5 mr-3 h-6 w-6\",\n\t\t\t},\n\t\t\tfalse: {\n\t\t\t\ttext: \"ml-2 font-semibold\",\n\t\t\t},\n\t\t},\n\t},\n});\n\nexport interface AlertProps extends ComponentPropsWithoutRef<\"div\"> {\n\t/**\n\t * The type of alert to display.\n\t *\n\t * @default 'info'\n\t */\n\ttype?: \"success\" | \"warning\" | \"error\" | \"info\";\n\t/**\n\t * The style variant of the alert.\n\t *\n\t * @default 'outline'\n\t */\n\tvariant?: \"solid\" | \"outline\";\n\t/**\n\t * The title of the alert.\n\t */\n\ttitle?: string;\n\t/**\n\t * The content of the alert.\n\t */\n\tchildren?: ReactNode;\n}\n\nexport const Alert = forwardRef<HTMLDivElement, AlertProps>(\n\t({ type = \"info\", variant = \"outline\", title, children, className, ...props }: AlertProps, ref) => {\n\t\tconst { base, icon, text, title: titleStyle } = alertVariants({ type, title: !!title });\n\n\t\tconst theirProps = props as object;\n\t\tconst Icon = ICONS[type][variant];\n\t\treturn (\n\t\t\t<div ref={ref as never} className={base({ className })} {...theirProps}>\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<Icon className={icon()} />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className={title ? titleStyle() : text()}>{title ?? children}</div>\n\t\t\t\t\t\t{title && <div className={text()}>{children}</div>}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t},\n);\nAlert.displayName = \"Alert\";\n",
      "type": "registry:component"
    }
  ]
}