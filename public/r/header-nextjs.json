{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "header-nextjs",
  "type": "registry:component",
  "title": "Header",
  "description": "A header for the top of the page. (Optimized for Next.js)",
  "dependencies": [
    "tailwind-variants",
    "motion",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/nextjs/header.tsx",
      "content": "import React, { useCallback, useEffect } from \"react\";\nimport { type ComponentPropsWithoutRef, forwardRef, useState } from \"react\";\nimport { tv } from \"tailwind-variants\";\nimport { motion, useMotionValueEvent, useScroll, type SVGMotionProps } from \"motion/react\";\nimport { Button } from \"@/components/ui/button\";\n\nimport Link from \"next/link\";\nimport Image from \"next/image\";\n\nconst Path: React.FC<SVGMotionProps<SVGPathElement>> = (props) => (\n    <motion.path fill=\"transparent\" strokeWidth=\"2\" stroke=\"#0A1014\" strokeLinecap=\"round\" {...props} />\n);\n\nconst useIsWide = () => {\n    const [isWide, setIsWide] = useState(false);\n\n    useEffect(() => {\n        const mediaQuery = window.matchMedia(\"(min-width: 780px)\");\n        const handleMediaChange = (event: MediaQueryListEvent) => {\n            setIsWide(event.matches);\n        };\n\n        setIsWide(mediaQuery.matches);\n\n        mediaQuery.addEventListener(\"change\", handleMediaChange);\n\n        return () => {\n            mediaQuery.removeEventListener(\"change\", handleMediaChange);\n        };\n    }, []);\n\n    return isWide;\n};\n\ninterface MenuToggleProps {\n    toggle: () => void;\n}\n\nconst MenuToggle: React.FC<MenuToggleProps> = ({ toggle }) => (\n    <button className=\"p-2 lg:hidden\" onClick={toggle}>\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 23 23\">\n            <Path\n                variants={{\n                    closed: { d: \"M 2 2.5 L 20 2.5\" },\n                    open: { d: \"M 3 16.5 L 17 2.5\" },\n                }}\n            />\n            <Path\n                d=\"M 2 9.423 L 20 9.423\"\n                variants={{\n                    closed: { opacity: 1 },\n                    open: { opacity: 0 },\n                }}\n                transition={{ duration: 0.1 }}\n            />\n            <Path\n                variants={{\n                    closed: { d: \"M 2 16.346 L 20 16.346\" },\n                    open: { d: \"M 3 2.5 L 17 16.346\" },\n                }}\n            />\n        </svg>\n    </button>\n);\n\nconst useToggle = (initialValue: boolean = false): [boolean, () => void] => {\n    const [state, setState] = useState(initialValue);\n    const toggle = useCallback(() => setState((prev) => !prev), []);\n    return [state, toggle];\n};\n\nconst useLockBodyScroll = (enabled: boolean = true) => {\n    useEffect(() => {\n        if (!enabled) return;\n\n        const originalStyle = window.getComputedStyle(document.body).overflow;\n        document.body.style.overflow = \"hidden\";\n\n        return () => {\n            document.body.style.overflow = originalStyle;\n        };\n    }, [enabled]);\n};\n\nconst barVariants = {\n    rest: { opacity: 0, y: 5 },\n    hover: {\n        opacity: 1,\n        y: 0,\n        transition: {\n            delay: 0.1,\n            type: \"spring\",\n        },\n    },\n};\n\nconst mobileMenuContainerVariants = {\n    open: {\n        display: \"block\",\n    },\n    closed: {\n        display: \"none\",\n        transition: { delay: 0.8 },\n    },\n};\n\nconst mobileMenuItemContainerVariants = {\n    open: {\n        opacity: 1,\n        transition: {\n            ease: \"easeOut\",\n            staggerChildren: 0.07,\n            delayChildren: 0.2,\n        },\n    },\n    closed: {\n        opacity: 0,\n        transition: { delay: 0.6, staggerChildren: 0.05, staggerDirection: -1 },\n    },\n};\n\nconst mobileMenuItemVariants = {\n    open: {\n        y: 0,\n        opacity: 1,\n        transition: {\n            ease: \"easeOut\",\n            y: { stiffness: 1000, velocity: -100 },\n        },\n    },\n    closed: {\n        y: 50,\n        opacity: 0,\n        transition: {\n            ease: \"easeIn\",\n            y: { stiffness: 1000 },\n        },\n    },\n};\n\nconst mobileMenuButtonsVariants = {\n    open: {\n        opacity: 1,\n        transition: { delay: 0.4, duration: 0.4 },\n    },\n    closed: {\n        opacity: 0,\n        transition: { delay: 0 },\n    },\n};\n\nconst headerAnimationVariants = {\n    show: {\n        top: 0,\n        transition: { ease: \"easeOut\", stiffness: 100 },\n    },\n    hide: {\n        top: -88,\n    },\n};\n\ninterface MobileMenuItemProps {\n    name: string;\n    href: string;\n    index: number;\n    isCurrent: boolean;\n    color?: string;\n}\n\nconst MobileMenuItem: React.FC<MobileMenuItemProps> = ({ name, href, color, isCurrent }) => {\n    return (\n        <motion.li className=\"font-semibold\" variants={mobileMenuItemVariants}>\n            <a className=\"inline-flex w-full items-center py-4 leading-6 text-on-background\" href={href}>\n                <span className=\"pr-2\">{name}</span>\n                {isCurrent && (\n                    <svg width=\"8\" height=\"8\">\n                        <title>Current page</title>\n                        <circle cx=\"4\" cy=\"4\" r=\"4\" fill={color} />\n                    </svg>\n                )}\n            </a>\n        </motion.li>\n    );\n};\n\nexport interface HeaderButtonProps {\n    href: string;\n    target?: \"_blank\" | \"_self\" | \"_parent\" | \"_top\";\n    title: string;\n}\n\nexport interface HeaderProps extends ComponentPropsWithoutRef<\"div\"> {\n    /**\n     * Header branding\n     */\n    brand?: {\n        /**\n         * Name\n         */\n        name: string;\n        /**\n         * URL to the brand's homepage\n         */\n        href: string;\n        /**\n         * Logo URL\n         */\n        logo: string;\n        /**\n         * Whether to show the brand name in the header\n         *\n         * @default false\n         */\n        showTitle?: boolean;\n        /**\n         * Whether to round the logo corners\n         *\n         * @default false\n         */\n        rounded?: boolean;\n    };\n    /**\n     * List of navigation items to display in the header.\n     */\n    navigation: { name: string; href: string }[];\n    /**\n     * The buttons to display on the right side of the header.\n     */\n    buttons?: HeaderButtonProps[];\n    /**\n     * The colour that is shown when a Header link is active.\n     */\n    color?: string;\n    /**\n     * Which link is currently active.\n     */\n    current?: string | number;\n}\n\nexport const Header = forwardRef<HTMLDivElement, HeaderProps>(\n    (\n        {\n            navigation,\n            brand = {\n                logo: \"\",\n                href: \"/\",\n                name: \"ACME\",\n            },\n            current,\n            color,\n            buttons,\n        }: HeaderProps,\n        ref,\n    ) => {\n        const [isScrolled, setIsScrolled] = useState(false);\n        const [lastYPosition, setLastYPosition] = useState(0);\n        const [isHeaderShown, setIsHeaderShown] = useState(true);\n        const isWide = useIsWide();\n\n        const { scrollY } = useScroll();\n        const [isMobileMenuOpen, toggleMobileMenuOpen] = useToggle(false);\n\n        const headerHeight = 88;\n\n        useLockBodyScroll(isMobileMenuOpen);\n\n        useMotionValueEvent(scrollY, \"change\", (latest) => {\n            setIsScrolled(latest > 10);\n            if (!isMobileMenuOpen) {\n                setIsHeaderShown(latest < headerHeight || latest < lastYPosition);\n                setLastYPosition(latest);\n            }\n        });\n\n        const headerVariants = tv({\n            base: \"fixed inset-x-0 top-0 z-50 py-2 transition-[padding-top,padding-bottom,box-shadow] ease-in-out lg:py-0 text-white\",\n            variants: {\n                isScrolled: {\n                    true: \"border-b border-outline backdrop-blur backdrop-opacity-50\",\n                    false: \"bg-transparent lg:py-4\",\n                },\n            },\n        });\n\n        return (\n            <motion.header\n                variants={headerAnimationVariants}\n                initial={\"show\"}\n                animate={isWide || isMobileMenuOpen || isHeaderShown ? \"show\" : \"hide\"}\n                className={headerVariants({ isScrolled })}\n                style={{\n                    backgroundColor: isScrolled ? `${color}80` : \"transparent\",\n                    borderColor: isScrolled ? color : \"transparent\",\n                }}\n                ref={ref}\n            >\n                <motion.nav\n                    className=\"mx-auto flex h-12 max-w-6xl items-center justify-between px-6 lg:h-16 lg:px-8\"\n                    initial={false}\n                    animate={isMobileMenuOpen ? \"open\" : \"closed\"}\n                >\n                    {/* Mobile hamburger menu */}\n                    <MenuToggle toggle={() => toggleMobileMenuOpen()} />\n\n                    {/* Site Title */}\n                    <Link href={brand.href} className=\"-m-1.5 flex items-center gap-2 p-1.5\">\n                        <Image className=\"h-7 w-auto\" src={brand.logo} alt={brand.name} width={100} height={100} />\n                        {brand.showTitle && (\n                            <span className=\"text-xl font-semibold text-on-background lg:text-base text-black\">\n\t\t\t\t\t\t\t\t{brand.name}\n\t\t\t\t\t\t\t</span>\n                        )}\n                    </Link>\n\n                    {/* Mobile Menu */}\n                    <motion.div\n                        className=\"absolute inset-x-0 bottom-0 top-16 h-[calc(100svh-4rem)]  lg:hidden text-black\"\n                        variants={mobileMenuContainerVariants}\n                    >\n                        <motion.ul\n                            className=\"flex h-full w-full flex-col border-t border-outline px-6 py-4\"\n                            style={{ backgroundColor: color }}\n                            variants={mobileMenuItemContainerVariants}\n                        >\n                            {navigation.map((item, index) => {\n                                const isCurrent =\n                                    (typeof current === \"string\" && item.href === current) ||\n                                    (typeof current === \"number\" && index === current);\n                                return (\n                                    <MobileMenuItem\n                                        key={item.name}\n                                        name={item.name}\n                                        href={item.href}\n                                        index={index}\n                                        color={color}\n                                        isCurrent={isCurrent}\n                                    />\n                                );\n                            })}\n                            {buttons?.length && (\n                                <motion.div\n                                    className=\"mt-auto flex flex-col gap-2\"\n                                    variants={mobileMenuButtonsVariants}\n                                >\n                                    {buttons?.map((buttonProps) => {\n                                        return (\n                                            <Button\n                                                key={buttonProps.title}\n                                                {...buttonProps}\n                                                style={{ backgroundColor: color }}\n                                            >\n                                                {buttonProps.href ? (\n                                                    <Link href={buttonProps.href} target={buttonProps.target ?? \"_self\"}>\n                                                        {buttonProps.title}\n                                                    </Link>\n                                                ) : (\n                                                    buttonProps.title\n                                                )}\n                                            </Button>\n                                        );\n                                    })}\n                                </motion.div>\n                            )}\n                        </motion.ul>\n                    </motion.div>\n\n                    {/* Desktop navigation */}\n                    <div className=\"hidden h-full items-center py-4 lg:flex lg:gap-x-12 text-black\">\n                        {navigation.map((item, index) => {\n                            const isCurrent =\n                                (typeof current === \"string\" && item.href === current) ||\n                                (typeof current === \"number\" && index === current);\n                            return (\n                                <motion.a\n                                    key={item.name}\n                                    href={item.href}\n                                    className=\"group relative text-sm font-semibold leading-6 text-on-background\"\n                                    initial=\"rest\"\n                                    whileHover=\"hover\"\n                                    animate=\"rest\"\n                                >\n                                    {item.name}\n                                    {isCurrent ? (\n                                        <span className=\"absolute inset-x-0 -bottom-1.5 flex h-1 w-full items-center justify-center\">\n\t\t\t\t\t\t\t\t\t\t\t<span\n                                                style={{ backgroundColor: color }}\n                                                className=\"h-[3px] w-3 rounded-full\"\n                                            />\n\t\t\t\t\t\t\t\t\t\t</span>\n                                    ) : (\n                                        <motion.span\n                                            className=\"absolute inset-x-0 -bottom-1.5 hidden h-1 w-full items-center justify-center group-hover:flex\"\n                                            variants={barVariants}\n                                        >\n\t\t\t\t\t\t\t\t\t\t\t<span\n                                                style={{ backgroundColor: color }}\n                                                className=\"h-[3px] w-1.5 rounded-full\"\n                                            />\n                                        </motion.span>\n                                    )}\n                                </motion.a>\n                            );\n                        })}\n                    </div>\n\n                    {/* Desktop buttons */}\n                    <div className=\"hidden gap-2 lg:flex lg:justify-end\">\n                        {buttons?.map((buttonProps) => {\n                            return (\n                                <Button key={buttonProps.title} {...buttonProps} style={{ backgroundColor: color }}>\n                                    {buttonProps.href ? (\n                                        <Link href={buttonProps.href} target={buttonProps.target ?? \"_self\"}>\n                                            {buttonProps.title}\n                                        </Link>\n                                    ) : (\n                                        buttonProps.title\n                                    )}\n                                </Button>\n                            );\n                        })}\n                    </div>\n\n                    {/* Mobile width adjustments */}\n                    <div className=\"h-9 w-9 opacity-0 lg:hidden\" />\n                </motion.nav>\n            </motion.header>\n        );\n    },\n);\nHeader.displayName = \"Header\";\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n\t\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault: \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n\t\t\t\tdestructive:\n\t\t\t\t\t\"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n\t\t\t\toutline:\n\t\t\t\t\t\"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n\t\t\t\tsecondary: \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n\t\t\t\tghost: \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n\t\t\t\tlink: \"text-primary underline-offset-4 hover:underline\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tdefault: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n\t\t\t\tsm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n\t\t\t\tlg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n\t\t\t\ticon: \"size-9\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t\tsize: \"default\",\n\t\t},\n\t},\n);\n\nfunction Button({\n\tclassName,\n\tvariant,\n\tsize,\n\tasChild = false,\n\t...props\n}: React.ComponentProps<\"button\"> &\n\tVariantProps<typeof buttonVariants> & {\n\t\tasChild?: boolean;\n\t}) {\n\tconst Comp = asChild ? Slot : \"button\";\n\n\treturn <Comp data-slot=\"button\" className={cn(buttonVariants({ variant, size, className }))} {...props} />;\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}