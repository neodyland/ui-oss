{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "header",
  "type": "registry:component",
  "title": "Header",
  "description": "A header for the top of the page.",
  "dependencies": [
    "tailwind-variants",
    "motion",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/header.tsx",
      "content": "import React, { useCallback, useEffect } from \"react\";\nimport { type ComponentPropsWithoutRef, forwardRef, useState } from \"react\";\nimport { tv } from \"tailwind-variants\";\nimport { motion, useMotionValueEvent, useScroll, type SVGMotionProps } from \"motion/react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst Path: React.FC<SVGMotionProps<SVGPathElement>> = (props) => (\n\t<motion.path fill=\"transparent\" strokeWidth=\"2\" stroke=\"#0A1014\" strokeLinecap=\"round\" {...props} />\n);\n\nconst useIsWide = () => {\n\tconst [isWide, setIsWide] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst mediaQuery = window.matchMedia(\"(min-width: 780px)\");\n\t\tconst handleMediaChange = (event: MediaQueryListEvent) => {\n\t\t\tsetIsWide(event.matches);\n\t\t};\n\n\t\tsetIsWide(mediaQuery.matches);\n\n\t\tmediaQuery.addEventListener(\"change\", handleMediaChange);\n\n\t\treturn () => {\n\t\t\tmediaQuery.removeEventListener(\"change\", handleMediaChange);\n\t\t};\n\t}, []);\n\n\treturn isWide;\n};\n\ninterface MenuToggleProps {\n\ttoggle: () => void;\n}\n\nconst MenuToggle: React.FC<MenuToggleProps> = ({ toggle }) => (\n\t<button className=\"p-2 lg:hidden\" onClick={toggle}>\n\t\t<svg width=\"20\" height=\"20\" viewBox=\"0 0 23 23\">\n\t\t\t<Path\n\t\t\t\tvariants={{\n\t\t\t\t\tclosed: { d: \"M 2 2.5 L 20 2.5\" },\n\t\t\t\t\topen: { d: \"M 3 16.5 L 17 2.5\" },\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Path\n\t\t\t\td=\"M 2 9.423 L 20 9.423\"\n\t\t\t\tvariants={{\n\t\t\t\t\tclosed: { opacity: 1 },\n\t\t\t\t\topen: { opacity: 0 },\n\t\t\t\t}}\n\t\t\t\ttransition={{ duration: 0.1 }}\n\t\t\t/>\n\t\t\t<Path\n\t\t\t\tvariants={{\n\t\t\t\t\tclosed: { d: \"M 2 16.346 L 20 16.346\" },\n\t\t\t\t\topen: { d: \"M 3 2.5 L 17 16.346\" },\n\t\t\t\t}}\n\t\t\t/>\n\t\t</svg>\n\t</button>\n);\n\nconst useToggle = (initialValue: boolean = false): [boolean, () => void] => {\n\tconst [state, setState] = useState(initialValue);\n\tconst toggle = useCallback(() => setState((prev) => !prev), []);\n\treturn [state, toggle];\n};\n\nconst useLockBodyScroll = (enabled: boolean = true) => {\n\tuseEffect(() => {\n\t\tif (!enabled) return;\n\n\t\tconst originalStyle = window.getComputedStyle(document.body).overflow;\n\t\tdocument.body.style.overflow = \"hidden\";\n\n\t\treturn () => {\n\t\t\tdocument.body.style.overflow = originalStyle;\n\t\t};\n\t}, [enabled]);\n};\n\nconst barVariants = {\n\trest: { opacity: 0, y: 5 },\n\thover: {\n\t\topacity: 1,\n\t\ty: 0,\n\t\ttransition: {\n\t\t\tdelay: 0.1,\n\t\t\ttype: \"spring\",\n\t\t},\n\t},\n};\n\nconst mobileMenuContainerVariants = {\n\topen: {\n\t\tdisplay: \"block\",\n\t},\n\tclosed: {\n\t\tdisplay: \"none\",\n\t\ttransition: { delay: 0.8 },\n\t},\n};\n\nconst mobileMenuItemContainerVariants = {\n\topen: {\n\t\topacity: 1,\n\t\ttransition: {\n\t\t\tease: \"easeOut\",\n\t\t\tstaggerChildren: 0.07,\n\t\t\tdelayChildren: 0.2,\n\t\t},\n\t},\n\tclosed: {\n\t\topacity: 0,\n\t\ttransition: { delay: 0.6, staggerChildren: 0.05, staggerDirection: -1 },\n\t},\n};\n\nconst mobileMenuItemVariants = {\n\topen: {\n\t\ty: 0,\n\t\topacity: 1,\n\t\ttransition: {\n\t\t\tease: \"easeOut\",\n\t\t\ty: { stiffness: 1000, velocity: -100 },\n\t\t},\n\t},\n\tclosed: {\n\t\ty: 50,\n\t\topacity: 0,\n\t\ttransition: {\n\t\t\tease: \"easeIn\",\n\t\t\ty: { stiffness: 1000 },\n\t\t},\n\t},\n};\n\nconst mobileMenuButtonsVariants = {\n\topen: {\n\t\topacity: 1,\n\t\ttransition: { delay: 0.4, duration: 0.4 },\n\t},\n\tclosed: {\n\t\topacity: 0,\n\t\ttransition: { delay: 0 },\n\t},\n};\n\nconst headerAnimationVariants = {\n\tshow: {\n\t\ttop: 0,\n\t\ttransition: { ease: \"easeOut\", stiffness: 100 },\n\t},\n\thide: {\n\t\ttop: -88,\n\t},\n};\n\ninterface MobileMenuItemProps {\n\tname: string;\n\thref: string;\n\tindex: number;\n\tisCurrent: boolean;\n\tcolor?: string;\n}\n\nconst MobileMenuItem: React.FC<MobileMenuItemProps> = ({ name, href, color, isCurrent }) => {\n\treturn (\n\t\t<motion.li className=\"font-semibold\" variants={mobileMenuItemVariants}>\n\t\t\t<a className=\"inline-flex w-full items-center py-4 leading-6 text-on-background\" href={href}>\n\t\t\t\t<span className=\"pr-2\">{name}</span>\n\t\t\t\t{isCurrent && (\n\t\t\t\t\t<svg width=\"8\" height=\"8\">\n\t\t\t\t\t\t<title>Current page</title>\n\t\t\t\t\t\t<circle cx=\"4\" cy=\"4\" r=\"4\" fill={color} />\n\t\t\t\t\t</svg>\n\t\t\t\t)}\n\t\t\t</a>\n\t\t</motion.li>\n\t);\n};\n\nexport interface HeaderButtonProps {\n\thref: string;\n\ttarget?: \"_blank\" | \"_self\" | \"_parent\" | \"_top\";\n\ttitle: string;\n}\n\nexport interface HeaderProps extends ComponentPropsWithoutRef<\"div\"> {\n\t/**\n\t * Header branding\n\t */\n\tbrand?: {\n\t\t/**\n\t\t * Name\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * URL to the brand's homepage\n\t\t */\n\t\thref: string;\n\t\t/**\n\t\t * Logo URL\n\t\t */\n\t\tlogo: string;\n\t\t/**\n\t\t * Whether to show the brand name in the header\n\t\t *\n\t\t * @default false\n\t\t */\n\t\tshowTitle?: boolean;\n\t\t/**\n\t\t * Whether to round the logo corners\n\t\t *\n\t\t * @default false\n\t\t */\n\t\trounded?: boolean;\n\t};\n\t/**\n\t * List of navigation items to display in the header.\n\t */\n\tnavigation: { name: string; href: string }[];\n\t/**\n\t * The buttons to display on the right side of the header.\n\t */\n\tbuttons?: HeaderButtonProps[];\n\t/**\n\t * The colour that is shown when a Header link is active.\n\t */\n\tcolor?: string;\n\t/**\n\t * Which link is currently active.\n\t */\n\tcurrent?: string | number;\n}\n\nexport const Header = forwardRef<HTMLDivElement, HeaderProps>(\n\t(\n\t\t{\n\t\t\tnavigation,\n\t\t\tbrand = {\n\t\t\t\tlogo: \"\",\n\t\t\t\thref: \"/\",\n\t\t\t\tname: \"ACME\",\n\t\t\t},\n\t\t\tcurrent,\n\t\t\tcolor,\n\t\t\tbuttons,\n\t\t}: HeaderProps,\n\t\tref,\n\t) => {\n\t\tconst [isScrolled, setIsScrolled] = useState(false);\n\t\tconst [lastYPosition, setLastYPosition] = useState(0);\n\t\tconst [isHeaderShown, setIsHeaderShown] = useState(true);\n\t\tconst isWide = useIsWide();\n\n\t\tconst { scrollY } = useScroll();\n\t\tconst [isMobileMenuOpen, toggleMobileMenuOpen] = useToggle(false);\n\n\t\tconst headerHeight = 88;\n\n\t\tuseLockBodyScroll(isMobileMenuOpen);\n\n\t\tuseMotionValueEvent(scrollY, \"change\", (latest) => {\n\t\t\tsetIsScrolled(latest > 10);\n\t\t\tif (!isMobileMenuOpen) {\n\t\t\t\tsetIsHeaderShown(latest < headerHeight || latest < lastYPosition);\n\t\t\t\tsetLastYPosition(latest);\n\t\t\t}\n\t\t});\n\n\t\tconst headerVariants = tv({\n\t\t\tbase: \"fixed inset-x-0 top-0 z-50 py-2 transition-[padding-top,padding-bottom,box-shadow] ease-in-out lg:py-0 text-white\",\n\t\t\tvariants: {\n\t\t\t\tisScrolled: {\n\t\t\t\t\ttrue: \"border-b border-outline backdrop-blur backdrop-opacity-50\",\n\t\t\t\t\tfalse: \"bg-transparent lg:py-4\",\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\treturn (\n\t\t\t<motion.header\n\t\t\t\tvariants={headerAnimationVariants}\n\t\t\t\tinitial={\"show\"}\n\t\t\t\tanimate={isWide || isMobileMenuOpen || isHeaderShown ? \"show\" : \"hide\"}\n\t\t\t\tclassName={headerVariants({ isScrolled })}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: isScrolled ? `${color}80` : \"transparent\",\n\t\t\t\t\tborderColor: isScrolled ? color : \"transparent\",\n\t\t\t\t}}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t<motion.nav\n\t\t\t\t\tclassName=\"mx-auto flex h-12 max-w-6xl items-center justify-between px-6 lg:h-16 lg:px-8\"\n\t\t\t\t\tinitial={false}\n\t\t\t\t\tanimate={isMobileMenuOpen ? \"open\" : \"closed\"}\n\t\t\t\t>\n\t\t\t\t\t{/* Mobile hamburger menu */}\n\t\t\t\t\t<MenuToggle toggle={() => toggleMobileMenuOpen()} />\n\n\t\t\t\t\t{/* Site Title */}\n\t\t\t\t\t<a href={brand.href} className=\"-m-1.5 flex items-center gap-2 p-1.5\">\n\t\t\t\t\t\t<img className=\"h-7 w-auto\" src={brand.logo} alt={brand.name} />\n\t\t\t\t\t\t{brand.showTitle && (\n\t\t\t\t\t\t\t<span className=\"text-xl font-semibold text-on-background lg:text-base text-black\">\n\t\t\t\t\t\t\t\t{brand.name}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</a>\n\n\t\t\t\t\t{/* Mobile Menu */}\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tclassName=\"absolute inset-x-0 bottom-0 top-16 h-[calc(100svh-4rem)]  lg:hidden text-black\"\n\t\t\t\t\t\tvariants={mobileMenuContainerVariants}\n\t\t\t\t\t>\n\t\t\t\t\t\t<motion.ul\n\t\t\t\t\t\t\tclassName=\"flex h-full w-full flex-col border-t border-outline px-6 py-4\"\n\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\tvariants={mobileMenuItemContainerVariants}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{navigation.map((item, index) => {\n\t\t\t\t\t\t\t\tconst isCurrent =\n\t\t\t\t\t\t\t\t\t(typeof current === \"string\" && item.href === current) ||\n\t\t\t\t\t\t\t\t\t(typeof current === \"number\" && index === current);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MobileMenuItem\n\t\t\t\t\t\t\t\t\t\tkey={item.name}\n\t\t\t\t\t\t\t\t\t\tname={item.name}\n\t\t\t\t\t\t\t\t\t\thref={item.href}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\t\tisCurrent={isCurrent}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t{buttons?.length && (\n\t\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\t\tclassName=\"mt-auto flex flex-col gap-2\"\n\t\t\t\t\t\t\t\t\tvariants={mobileMenuButtonsVariants}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{buttons?.map((buttonProps) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tkey={buttonProps.title}\n\t\t\t\t\t\t\t\t\t\t\t\t{...buttonProps}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{buttonProps.href ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a href={buttonProps.href} target={buttonProps.target ?? \"_self\"}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{buttonProps.title}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonProps.title\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</motion.ul>\n\t\t\t\t\t</motion.div>\n\n\t\t\t\t\t{/* Desktop navigation */}\n\t\t\t\t\t<div className=\"hidden h-full items-center py-4 lg:flex lg:gap-x-12 text-black\">\n\t\t\t\t\t\t{navigation.map((item, index) => {\n\t\t\t\t\t\t\tconst isCurrent =\n\t\t\t\t\t\t\t\t(typeof current === \"string\" && item.href === current) ||\n\t\t\t\t\t\t\t\t(typeof current === \"number\" && index === current);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<motion.a\n\t\t\t\t\t\t\t\t\tkey={item.name}\n\t\t\t\t\t\t\t\t\thref={item.href}\n\t\t\t\t\t\t\t\t\tclassName=\"group relative text-sm font-semibold leading-6 text-on-background\"\n\t\t\t\t\t\t\t\t\tinitial=\"rest\"\n\t\t\t\t\t\t\t\t\twhileHover=\"hover\"\n\t\t\t\t\t\t\t\t\tanimate=\"rest\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t\t\t{isCurrent ? (\n\t\t\t\t\t\t\t\t\t\t<span className=\"absolute inset-x-0 -bottom-1.5 flex h-1 w-full items-center justify-center\">\n\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-[3px] w-3 rounded-full\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<motion.span\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"absolute inset-x-0 -bottom-1.5 hidden h-1 w-full items-center justify-center group-hover:flex\"\n\t\t\t\t\t\t\t\t\t\t\tvariants={barVariants}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-[3px] w-1.5 rounded-full\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</motion.span>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</motion.a>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Desktop buttons */}\n\t\t\t\t\t<div className=\"hidden gap-2 lg:flex lg:justify-end\">\n\t\t\t\t\t\t{buttons?.map((buttonProps) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Button key={buttonProps.title} {...buttonProps} style={{ backgroundColor: color }}>\n\t\t\t\t\t\t\t\t\t{buttonProps.href ? (\n\t\t\t\t\t\t\t\t\t\t<a href={buttonProps.href} target={buttonProps.target ?? \"_self\"}>\n\t\t\t\t\t\t\t\t\t\t\t{buttonProps.title}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\tbuttonProps.title\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Mobile width adjustments */}\n\t\t\t\t\t<div className=\"h-9 w-9 opacity-0 lg:hidden\" />\n\t\t\t\t</motion.nav>\n\t\t\t</motion.header>\n\t\t);\n\t},\n);\nHeader.displayName = \"Header\";\n",
      "type": "registry:component"
    },
    {
      "path": "registry\\header.tsx",
      "content": "import React, { useCallback, useEffect } from \"react\";\nimport { type ComponentPropsWithoutRef, forwardRef, useState } from \"react\";\nimport { tv } from \"tailwind-variants\";\nimport { motion, useMotionValueEvent, useScroll, type SVGMotionProps } from \"motion/react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst Path: React.FC<SVGMotionProps<SVGPathElement>> = (props) => (\n\t<motion.path fill=\"transparent\" strokeWidth=\"2\" stroke=\"#0A1014\" strokeLinecap=\"round\" {...props} />\n);\n\nconst useIsWide = () => {\n\tconst [isWide, setIsWide] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst mediaQuery = window.matchMedia(\"(min-width: 780px)\");\n\t\tconst handleMediaChange = (event: MediaQueryListEvent) => {\n\t\t\tsetIsWide(event.matches);\n\t\t};\n\n\t\tsetIsWide(mediaQuery.matches);\n\n\t\tmediaQuery.addEventListener(\"change\", handleMediaChange);\n\n\t\treturn () => {\n\t\t\tmediaQuery.removeEventListener(\"change\", handleMediaChange);\n\t\t};\n\t}, []);\n\n\treturn isWide;\n};\n\ninterface MenuToggleProps {\n\ttoggle: () => void;\n}\n\nconst MenuToggle: React.FC<MenuToggleProps> = ({ toggle }) => (\n\t<button className=\"p-2 lg:hidden\" onClick={toggle}>\n\t\t<svg width=\"20\" height=\"20\" viewBox=\"0 0 23 23\">\n\t\t\t<Path\n\t\t\t\tvariants={{\n\t\t\t\t\tclosed: { d: \"M 2 2.5 L 20 2.5\" },\n\t\t\t\t\topen: { d: \"M 3 16.5 L 17 2.5\" },\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Path\n\t\t\t\td=\"M 2 9.423 L 20 9.423\"\n\t\t\t\tvariants={{\n\t\t\t\t\tclosed: { opacity: 1 },\n\t\t\t\t\topen: { opacity: 0 },\n\t\t\t\t}}\n\t\t\t\ttransition={{ duration: 0.1 }}\n\t\t\t/>\n\t\t\t<Path\n\t\t\t\tvariants={{\n\t\t\t\t\tclosed: { d: \"M 2 16.346 L 20 16.346\" },\n\t\t\t\t\topen: { d: \"M 3 2.5 L 17 16.346\" },\n\t\t\t\t}}\n\t\t\t/>\n\t\t</svg>\n\t</button>\n);\n\nconst useToggle = (initialValue: boolean = false): [boolean, () => void] => {\n\tconst [state, setState] = useState(initialValue);\n\tconst toggle = useCallback(() => setState((prev) => !prev), []);\n\treturn [state, toggle];\n};\n\nconst useLockBodyScroll = (enabled: boolean = true) => {\n\tuseEffect(() => {\n\t\tif (!enabled) return;\n\n\t\tconst originalStyle = window.getComputedStyle(document.body).overflow;\n\t\tdocument.body.style.overflow = \"hidden\";\n\n\t\treturn () => {\n\t\t\tdocument.body.style.overflow = originalStyle;\n\t\t};\n\t}, [enabled]);\n};\n\nconst barVariants = {\n\trest: { opacity: 0, y: 5 },\n\thover: {\n\t\topacity: 1,\n\t\ty: 0,\n\t\ttransition: {\n\t\t\tdelay: 0.1,\n\t\t\ttype: \"spring\",\n\t\t},\n\t},\n};\n\nconst mobileMenuContainerVariants = {\n\topen: {\n\t\tdisplay: \"block\",\n\t},\n\tclosed: {\n\t\tdisplay: \"none\",\n\t\ttransition: { delay: 0.8 },\n\t},\n};\n\nconst mobileMenuItemContainerVariants = {\n\topen: {\n\t\topacity: 1,\n\t\ttransition: {\n\t\t\tease: \"easeOut\",\n\t\t\tstaggerChildren: 0.07,\n\t\t\tdelayChildren: 0.2,\n\t\t},\n\t},\n\tclosed: {\n\t\topacity: 0,\n\t\ttransition: { delay: 0.6, staggerChildren: 0.05, staggerDirection: -1 },\n\t},\n};\n\nconst mobileMenuItemVariants = {\n\topen: {\n\t\ty: 0,\n\t\topacity: 1,\n\t\ttransition: {\n\t\t\tease: \"easeOut\",\n\t\t\ty: { stiffness: 1000, velocity: -100 },\n\t\t},\n\t},\n\tclosed: {\n\t\ty: 50,\n\t\topacity: 0,\n\t\ttransition: {\n\t\t\tease: \"easeIn\",\n\t\t\ty: { stiffness: 1000 },\n\t\t},\n\t},\n};\n\nconst mobileMenuButtonsVariants = {\n\topen: {\n\t\topacity: 1,\n\t\ttransition: { delay: 0.4, duration: 0.4 },\n\t},\n\tclosed: {\n\t\topacity: 0,\n\t\ttransition: { delay: 0 },\n\t},\n};\n\nconst headerAnimationVariants = {\n\tshow: {\n\t\ttop: 0,\n\t\ttransition: { ease: \"easeOut\", stiffness: 100 },\n\t},\n\thide: {\n\t\ttop: -88,\n\t},\n};\n\ninterface MobileMenuItemProps {\n\tname: string;\n\thref: string;\n\tindex: number;\n\tisCurrent: boolean;\n\tcolor?: string;\n}\n\nconst MobileMenuItem: React.FC<MobileMenuItemProps> = ({ name, href, color, isCurrent }) => {\n\treturn (\n\t\t<motion.li className=\"font-semibold\" variants={mobileMenuItemVariants}>\n\t\t\t<a className=\"inline-flex w-full items-center py-4 leading-6 text-on-background\" href={href}>\n\t\t\t\t<span className=\"pr-2\">{name}</span>\n\t\t\t\t{isCurrent && (\n\t\t\t\t\t<svg width=\"8\" height=\"8\">\n\t\t\t\t\t\t<title>Current page</title>\n\t\t\t\t\t\t<circle cx=\"4\" cy=\"4\" r=\"4\" fill={color} />\n\t\t\t\t\t</svg>\n\t\t\t\t)}\n\t\t\t</a>\n\t\t</motion.li>\n\t);\n};\n\nexport interface HeaderButtonProps {\n\thref: string;\n\ttarget?: \"_blank\" | \"_self\" | \"_parent\" | \"_top\";\n\ttitle: string;\n}\n\nexport interface HeaderProps extends ComponentPropsWithoutRef<\"div\"> {\n\t/**\n\t * Header branding\n\t */\n\tbrand?: {\n\t\t/**\n\t\t * Name\n\t\t */\n\t\tname: string;\n\t\t/**\n\t\t * URL to the brand's homepage\n\t\t */\n\t\thref: string;\n\t\t/**\n\t\t * Logo URL\n\t\t */\n\t\tlogo: string;\n\t\t/**\n\t\t * Whether to show the brand name in the header\n\t\t *\n\t\t * @default false\n\t\t */\n\t\tshowTitle?: boolean;\n\t\t/**\n\t\t * Whether to round the logo corners\n\t\t *\n\t\t * @default false\n\t\t */\n\t\trounded?: boolean;\n\t};\n\t/**\n\t * List of navigation items to display in the header.\n\t */\n\tnavigation: { name: string; href: string }[];\n\t/**\n\t * The buttons to display on the right side of the header.\n\t */\n\tbuttons?: HeaderButtonProps[];\n\t/**\n\t * The colour that is shown when a Header link is active.\n\t */\n\tcolor?: string;\n\t/**\n\t * Which link is currently active.\n\t */\n\tcurrent?: string | number;\n}\n\nexport const Header = forwardRef<HTMLDivElement, HeaderProps>(\n\t(\n\t\t{\n\t\t\tnavigation,\n\t\t\tbrand = {\n\t\t\t\tlogo: \"\",\n\t\t\t\thref: \"/\",\n\t\t\t\tname: \"ACME\",\n\t\t\t},\n\t\t\tcurrent,\n\t\t\tcolor,\n\t\t\tbuttons,\n\t\t}: HeaderProps,\n\t\tref,\n\t) => {\n\t\tconst [isScrolled, setIsScrolled] = useState(false);\n\t\tconst [lastYPosition, setLastYPosition] = useState(0);\n\t\tconst [isHeaderShown, setIsHeaderShown] = useState(true);\n\t\tconst isWide = useIsWide();\n\n\t\tconst { scrollY } = useScroll();\n\t\tconst [isMobileMenuOpen, toggleMobileMenuOpen] = useToggle(false);\n\n\t\tconst headerHeight = 88;\n\n\t\tuseLockBodyScroll(isMobileMenuOpen);\n\n\t\tuseMotionValueEvent(scrollY, \"change\", (latest) => {\n\t\t\tsetIsScrolled(latest > 10);\n\t\t\tif (!isMobileMenuOpen) {\n\t\t\t\tsetIsHeaderShown(latest < headerHeight || latest < lastYPosition);\n\t\t\t\tsetLastYPosition(latest);\n\t\t\t}\n\t\t});\n\n\t\tconst headerVariants = tv({\n\t\t\tbase: \"fixed inset-x-0 top-0 z-50 py-2 transition-[padding-top,padding-bottom,box-shadow] ease-in-out lg:py-0 text-white\",\n\t\t\tvariants: {\n\t\t\t\tisScrolled: {\n\t\t\t\t\ttrue: \"border-b border-outline backdrop-blur backdrop-opacity-50\",\n\t\t\t\t\tfalse: \"bg-transparent lg:py-4\",\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\treturn (\n\t\t\t<motion.header\n\t\t\t\tvariants={headerAnimationVariants}\n\t\t\t\tinitial={\"show\"}\n\t\t\t\tanimate={isWide || isMobileMenuOpen || isHeaderShown ? \"show\" : \"hide\"}\n\t\t\t\tclassName={headerVariants({ isScrolled })}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: isScrolled ? `${color}80` : \"transparent\",\n\t\t\t\t\tborderColor: isScrolled ? color : \"transparent\",\n\t\t\t\t}}\n\t\t\t\tref={ref}\n\t\t\t>\n\t\t\t\t<motion.nav\n\t\t\t\t\tclassName=\"mx-auto flex h-12 max-w-6xl items-center justify-between px-6 lg:h-16 lg:px-8\"\n\t\t\t\t\tinitial={false}\n\t\t\t\t\tanimate={isMobileMenuOpen ? \"open\" : \"closed\"}\n\t\t\t\t>\n\t\t\t\t\t{/* Mobile hamburger menu */}\n\t\t\t\t\t<MenuToggle toggle={() => toggleMobileMenuOpen()} />\n\n\t\t\t\t\t{/* Site Title */}\n\t\t\t\t\t<a href={brand.href} className=\"-m-1.5 flex items-center gap-2 p-1.5\">\n\t\t\t\t\t\t<img className=\"h-7 w-auto\" src={brand.logo} alt={brand.name} />\n\t\t\t\t\t\t{brand.showTitle && (\n\t\t\t\t\t\t\t<span className=\"text-xl font-semibold text-on-background lg:text-base text-black\">\n\t\t\t\t\t\t\t\t{brand.name}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</a>\n\n\t\t\t\t\t{/* Mobile Menu */}\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tclassName=\"absolute inset-x-0 bottom-0 top-16 h-[calc(100svh-4rem)]  lg:hidden text-black\"\n\t\t\t\t\t\tvariants={mobileMenuContainerVariants}\n\t\t\t\t\t>\n\t\t\t\t\t\t<motion.ul\n\t\t\t\t\t\t\tclassName=\"flex h-full w-full flex-col border-t border-outline px-6 py-4\"\n\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\tvariants={mobileMenuItemContainerVariants}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{navigation.map((item, index) => {\n\t\t\t\t\t\t\t\tconst isCurrent =\n\t\t\t\t\t\t\t\t\t(typeof current === \"string\" && item.href === current) ||\n\t\t\t\t\t\t\t\t\t(typeof current === \"number\" && index === current);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MobileMenuItem\n\t\t\t\t\t\t\t\t\t\tkey={item.name}\n\t\t\t\t\t\t\t\t\t\tname={item.name}\n\t\t\t\t\t\t\t\t\t\thref={item.href}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\t\tisCurrent={isCurrent}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t{buttons?.length && (\n\t\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\t\tclassName=\"mt-auto flex flex-col gap-2\"\n\t\t\t\t\t\t\t\t\tvariants={mobileMenuButtonsVariants}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{buttons?.map((buttonProps) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tkey={buttonProps.title}\n\t\t\t\t\t\t\t\t\t\t\t\t{...buttonProps}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{buttonProps.href ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a href={buttonProps.href} target={buttonProps.target ?? \"_self\"}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{buttonProps.title}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonProps.title\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</motion.ul>\n\t\t\t\t\t</motion.div>\n\n\t\t\t\t\t{/* Desktop navigation */}\n\t\t\t\t\t<div className=\"hidden h-full items-center py-4 lg:flex lg:gap-x-12 text-black\">\n\t\t\t\t\t\t{navigation.map((item, index) => {\n\t\t\t\t\t\t\tconst isCurrent =\n\t\t\t\t\t\t\t\t(typeof current === \"string\" && item.href === current) ||\n\t\t\t\t\t\t\t\t(typeof current === \"number\" && index === current);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<motion.a\n\t\t\t\t\t\t\t\t\tkey={item.name}\n\t\t\t\t\t\t\t\t\thref={item.href}\n\t\t\t\t\t\t\t\t\tclassName=\"group relative text-sm font-semibold leading-6 text-on-background\"\n\t\t\t\t\t\t\t\t\tinitial=\"rest\"\n\t\t\t\t\t\t\t\t\twhileHover=\"hover\"\n\t\t\t\t\t\t\t\t\tanimate=\"rest\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t\t\t{isCurrent ? (\n\t\t\t\t\t\t\t\t\t\t<span className=\"absolute inset-x-0 -bottom-1.5 flex h-1 w-full items-center justify-center\">\n\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-[3px] w-3 rounded-full\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<motion.span\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"absolute inset-x-0 -bottom-1.5 hidden h-1 w-full items-center justify-center group-hover:flex\"\n\t\t\t\t\t\t\t\t\t\t\tvariants={barVariants}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"h-[3px] w-1.5 rounded-full\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</motion.span>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</motion.a>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Desktop buttons */}\n\t\t\t\t\t<div className=\"hidden gap-2 lg:flex lg:justify-end\">\n\t\t\t\t\t\t{buttons?.map((buttonProps) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Button key={buttonProps.title} {...buttonProps} style={{ backgroundColor: color }}>\n\t\t\t\t\t\t\t\t\t{buttonProps.href ? (\n\t\t\t\t\t\t\t\t\t\t<a href={buttonProps.href} target={buttonProps.target ?? \"_self\"}>\n\t\t\t\t\t\t\t\t\t\t\t{buttonProps.title}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\tbuttonProps.title\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Mobile width adjustments */}\n\t\t\t\t\t<div className=\"h-9 w-9 opacity-0 lg:hidden\" />\n\t\t\t\t</motion.nav>\n\t\t\t</motion.header>\n\t\t);\n\t},\n);\nHeader.displayName = \"Header\";\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\components\\ui\\button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n\t\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault: \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n\t\t\t\tdestructive:\n\t\t\t\t\t\"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n\t\t\t\toutline:\n\t\t\t\t\t\"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n\t\t\t\tsecondary: \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n\t\t\t\tghost: \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n\t\t\t\tlink: \"text-primary underline-offset-4 hover:underline\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tdefault: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n\t\t\t\tsm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n\t\t\t\tlg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n\t\t\t\ticon: \"size-9\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t\tsize: \"default\",\n\t\t},\n\t},\n);\n\nfunction Button({\n\tclassName,\n\tvariant,\n\tsize,\n\tasChild = false,\n\t...props\n}: React.ComponentProps<\"button\"> &\n\tVariantProps<typeof buttonVariants> & {\n\t\tasChild?: boolean;\n\t}) {\n\tconst Comp = asChild ? Slot : \"button\";\n\n\treturn <Comp data-slot=\"button\" className={cn(buttonVariants({ variant, size, className }))} {...props} />;\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src\\lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n\treturn twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}