{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast",
  "type": "registry:component",
  "title": "Toast",
  "description": "A toast component for displaying notifications.",
  "dependencies": [
    "uuid",
    "framer-motion",
    "tailwind-variants",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/toast.tsx",
      "content": "import React, { useState, createContext, useContext, useMemo, useEffect, useRef, useCallback } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { AnimatePresence, LayoutGroup, motion } from \"framer-motion\";\nimport { tv } from \"tailwind-variants\";\nimport { CircleCheck, TriangleAlert, CircleAlert, Info, X } from \"lucide-react\";\nimport { type ComponentPropsWithoutRef, forwardRef } from \"react\";\n\ntype ToastType = \"success\" | \"warning\" | \"error\" | \"info\";\n\nconst useTimeout = (callback: () => void, delay?: number) => {\n\tconst savedCallback = useRef(callback);\n\n\tuseEffect(() => {\n\t\tsavedCallback.current = callback;\n\t}, [callback]);\n\n\tconst timeoutCallback = useCallback(() => {\n\t\tsavedCallback.current();\n\t}, [savedCallback]);\n\n\tuseEffect(() => {\n\t\tif (delay === null) return;\n\n\t\tconst id = delay ? setTimeout(timeoutCallback, delay) : null;\n\n\t\treturn () => {\n\t\t\tif (id) clearTimeout(id);\n\t\t};\n\t}, [delay, timeoutCallback]);\n};\n\ntype BaseToastProps = {\n\ttitle: string;\n\tdescription?: string;\n\ttype?: ToastType;\n\tduration?: number;\n\tisClosable?: boolean;\n};\n\ntype ToastData = {\n\tid: string;\n} & Required<BaseToastProps>;\n\ntype ToastContext = {\n\topen: (data: BaseToastProps) => void;\n\tclose: (id: string) => void;\n};\n\nconst ToastContext = createContext<ToastContext | undefined>(undefined);\nToastContext.displayName = \"ToastContext\";\n\nexport const useToast = () => {\n\tconst context = useContext(ToastContext);\n\n\tif (!context) {\n\t\tthrow new Error(\"useToast should be used within the ToastProvider!\");\n\t}\n\n\treturn context;\n};\n\nexport const ToastProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n\tconst [isMounted, setIsMounted] = useState(false);\n\tconst [toastList, setToastList] = useState<ToastData[]>([]);\n\n\tuseEffect(() => {\n\t\tsetIsMounted(true);\n\t}, []);\n\n\tconst open = useCallback(\n\t\t({ title, description = \"\", type = \"success\", duration = 5000, isClosable = true }: BaseToastProps) => {\n\t\t\tif (!title) throw new Error(\"Toast title is required!\");\n\t\t\tsetToastList((prev) => [\n\t\t\t\t...prev,\n\t\t\t\t{\n\t\t\t\t\tid: uuidv4(),\n\t\t\t\t\ttitle,\n\t\t\t\t\tdescription,\n\t\t\t\t\ttype,\n\t\t\t\t\tduration,\n\t\t\t\t\tisClosable,\n\t\t\t\t},\n\t\t\t]);\n\t\t},\n\t\t[],\n\t);\n\n\tconst close = useCallback((id: string) => {\n\t\tsetToastList((prev) => prev.filter((toast) => toast.id !== id));\n\t}, []);\n\n\tconst contextValue = useMemo(() => ({ open, close }), [open, close]);\n\n\treturn (\n\t\t<ToastContext.Provider value={contextValue}>\n\t\t\t{children}\n\t\t\t{isMounted &&\n\t\t\t\tcreatePortal(\n\t\t\t\t\t<motion.div\n\t\t\t\t\t\tclassName=\"pointer-events-none fixed inset-x-0 bottom-6 flex flex-col items-center space-y-4\"\n\t\t\t\t\t\tlayout\n\t\t\t\t\t>\n\t\t\t\t\t\t<LayoutGroup>\n\t\t\t\t\t\t\t<AnimatePresence>\n\t\t\t\t\t\t\t\t{toastList.map((toast) => (\n\t\t\t\t\t\t\t\t\t<Toast\n\t\t\t\t\t\t\t\t\t\tkey={toast.id}\n\t\t\t\t\t\t\t\t\t\tid={toast.id}\n\t\t\t\t\t\t\t\t\t\ttitle={toast.title}\n\t\t\t\t\t\t\t\t\t\tdescription={toast.description}\n\t\t\t\t\t\t\t\t\t\ttype={toast.type}\n\t\t\t\t\t\t\t\t\t\tduration={toast.duration}\n\t\t\t\t\t\t\t\t\t\tisClosable={toast.isClosable}\n\t\t\t\t\t\t\t\t\t\tonClose={() => close(toast.id)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</AnimatePresence>\n\t\t\t\t\t\t</LayoutGroup>\n\t\t\t\t\t</motion.div>,\n\t\t\t\t\tdocument.body,\n\t\t\t\t)}\n\t\t</ToastContext.Provider>\n\t);\n};\n\nconst toastVariants = tv({\n\tslots: {\n\t\tbase: \"pointer-events-auto mx-2 flex min-h-14 items-center rounded-md border py-3 pl-4 pr-3 text-sm tracking-wide transition-colors\",\n\t\tflex: \"flex items-center space-x-3\",\n\t\ticon: \"h-6 w-6 flex-shrink-0\",\n\t\ttitle: \"text-base font-bold tracking-wide\",\n\t\ttext: \"mt-0.5 font-medium tracking-wider\",\n\t\tcloseBtn: \"rounded-full p-1 transition-transform duration-200 ease-in-out hover:scale-110 active:scale-90\",\n\t},\n\tvariants: {\n\t\ttype: {\n\t\t\tsuccess: {\n\t\t\t\tbase: \"border-success-200 bg-success-50\",\n\t\t\t\ticon: \"text-success-500\",\n\t\t\t\ttitle: \"text-success-800\",\n\t\t\t\ttext: \"text-success-800\",\n\t\t\t\tcloseBtn: \"text-success-800\",\n\t\t\t},\n\t\t\twarning: {\n\t\t\t\tbase: \"border-warn-200 bg-warn-50\",\n\t\t\t\ticon: \"text-warn-500\",\n\t\t\t\ttitle: \"text-warn-800\",\n\t\t\t\ttext: \"text-warn-800\",\n\t\t\t\tcloseBtn: \"text-warn-800\",\n\t\t\t},\n\t\t\terror: {\n\t\t\t\tbase: \"border-error-200 bg-error-50\",\n\t\t\t\ticon: \"text-error-500\",\n\t\t\t\ttitle: \"text-error-800\",\n\t\t\t\ttext: \"text-error-800\",\n\t\t\t\tcloseBtn: \"text-error-800\",\n\t\t\t},\n\t\t\tinfo: {\n\t\t\t\tbase: \"border-info-200 bg-info-50\",\n\t\t\t\ticon: \"text-info-500\",\n\t\t\t\ttitle: \"text-info-800\",\n\t\t\t\ttext: \"text-info-800\",\n\t\t\t\tcloseBtn: \"text-info-800\",\n\t\t\t},\n\t\t},\n\t},\n});\n\nconst animation = {\n\tanimate: { opacity: 1, transition: { duration: 0.6 } },\n\tinitial: { opacity: 0 },\n\texit: { opacity: 0 },\n};\n\nconst ICONS = {\n\tsuccess: {\n\t\tsolid: CircleCheck,\n\t\toutline: CircleCheck,\n\t},\n\twarning: {\n\t\tsolid: TriangleAlert,\n\t\toutline: TriangleAlert,\n\t},\n\terror: {\n\t\tsolid: CircleAlert,\n\t\toutline: CircleAlert,\n\t},\n\tinfo: {\n\t\tsolid: Info,\n\t\toutline: Info,\n\t},\n};\n\nexport interface ToastProps extends ComponentPropsWithoutRef<\"div\"> {\n\ttitle: string;\n\tdescription: string;\n\ttype: \"success\" | \"warning\" | \"error\" | \"info\";\n\tduration: number;\n\tisClosable: boolean;\n\tonClose: () => void;\n}\n\nexport const Toast = forwardRef<HTMLDivElement, ToastProps>(\n\t({ title, description, type, duration, isClosable, onClose, className, ...props }, ref) => {\n\t\tuseTimeout(onClose, duration);\n\n\t\tconst { base, icon, text, title: titlev, flex, closeBtn } = toastVariants({ type });\n\n\t\tconst theirProps = props as object;\n\t\tconst ToastIcon = ICONS[type].solid;\n\t\treturn (\n\t\t\t<motion.div ref={ref} layout=\"position\" className={base({ className })} {...animation} {...theirProps}>\n\t\t\t\t<div className={flex()}>\n\t\t\t\t\t<ToastIcon className={icon()} />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className={titlev()}>{title}</div>\n\t\t\t\t\t\t{title && <div className={text()}>{description}</div>}\n\t\t\t\t\t</div>\n\t\t\t\t\t{isClosable && (\n\t\t\t\t\t\t<button type=\"button\" onClick={onClose} className={closeBtn()}>\n\t\t\t\t\t\t\t<X className=\"h-4 w-4\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\nToast.displayName = \"Toast\";\n",
      "type": "registry:component"
    }
  ]
}